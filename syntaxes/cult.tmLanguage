<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>cul</string>
		<string>cult</string>
	</array>
	<key>keyEquivalent</key>
	<string>^~S</string>
	<key>name</key>
	<string>Cult</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#comment</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#block-comment</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#sexp</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#string</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#language-functions</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>comment</key>
		<dict>
			<key>begin</key>
			<string>(^[ \t]+)?( ;)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.whitespace.comment.leading.cult</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?!\G)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>;</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.cult</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\n</string>
					<key>name</key>
					<string>comment.line.semicolon.cult</string>
				</dict>
			</array>
		</dict>
		<key>constants</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(true|false)</string>
					<key>name</key>
					<string>constant.language.boolean.cult</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;=[\(\s])((#e|#i)?[0-9]+(\.[0-9]+)?|(#x)[0-9a-fA-F]+|(#o)[0-7]+|(#b)[01]+)(?=[\s;()'",\[\]])</string>
					<key>name</key>
					<string>constant.numeric.cult</string>
				</dict>
			</array>
		</dict>

		<key>language-functions</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?x)
						(?&lt;=(\s|\(|\[)) # preceded by space or ( 
						( do|cond|define|variable|quote
						)
						(?=(\s|\())</string>
					<key>name</key>
					<string>keyword.control.cult</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>
						These functions run a test, and return a boolean
						answer.
					</string>
					<key>match</key>
					<string>(?x)
						(?&lt;=(\s|\()) # preceded by space or (
						( char-alphabetic|char-lower-case|char-numeric|
						  char-ready|char-upper-case|char-whitespace|
						  (?:char|string)(?:-ci)?(?:=|&lt;=?|&gt;=?)|
						  atom|boolean|bound-identifier=|char|complex|
						  identifier|integer|symbol|free-identifier=|inexact|
						  eof-object|exact|list|(?:input|output)-port|pair|
						  real|rational|zero|vector|negative|odd|null|string|
						  eq|equal|eqv|even|number|positive|procedure
						)
						(\?)		# name ends with ? sign
						(?=(\s|\()) # followed by space or (
					</string>
					<key>name</key>
					<string>support.function.boolean-test.cult</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>
						These functions change one type into another.
					</string>
					<key>match</key>
					<string>(?x)
						(?&lt;=(\s|\()) # preceded by space or (
						( int|int8|int16|int32|int64|
						  uint8|uint16|uint32|uint64|
						  float|float32|float64|
						  string|list|map
						)
						(?=(\s|\()) # followed by space or (					
					</string>
					<key>name</key>
					<string>support.function.convert-type.cult</string>
				</dict> 
				<dict>
					<key>match</key>
					<string>(?x)
						(?&lt;=(\s|\()) # preceded by space or (
						( append|apply|approximate|
						  call-with-current-continuation|call/cc|catch|
						  construct-identifier|define-syntax|display|foo|
						  for-each|force|format|cd|gen-counter|gen-loser|
						  generate-identifier|last-pair|length|let-syntax|
						  letrec-syntax|list|list-ref|list-tail|load|log|
						  macro|magnitude|map|map-streams|max|member|memq|
						  memv|min|newline|nil|not|peek-char|rationalize|
						  read|read-char|return|reverse|sequence|substring|
						  syntax|syntax-rules|transcript-off|transcript-on|
						  truncate|unwrap-syntax|values-list|write|write-char|
						  
						  # cons, car, cdr, etc
						  cons|c(a|d){1,4}r| 
                          
						  # unary math operators
						  abs|acos|angle|asin|assoc|assq|assv|atan|ceiling|
						  cos|floor|round|sin|sqrt|tan|
						  (?:real|imag)-part|numerator|denominator
                          
						  # other math operators
						  modulo|exp|expt|remainder|quotient|lcm|
                          
						  # ports / files
						  call-with-(?:input|output)-file|
						  (?:close|current)-(?:input|output)-port|
						  with-(?:input|output)-from-file|
						  open-(?:input|output)-file|
						  
						  # char-«foo»
						  char-(?:downcase|upcase|ready)|
						  
						  # make-«foo»
						  make-(?:polar|promise|rectangular|string|vector)
						  
						  # string-«foo», vector-«foo»
						  string(?:-(?:append|copy|length|ref))?|
						  vector(?:-length|-ref)
						)
						(?=(\s|\()) # followed by space or (
					</string>
					<key>name</key>
					<string>support.function.general.cult</string>
				</dict>
			</array>
		</dict>
		<key>sexp</key>
		<dict>
			<key>begin</key>
			<string>(\()</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.expression.begin.cult</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\))(\n)?</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.expression.end.cult</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>meta.after-expression.cult</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.expression.cult</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?x)
						(?&lt;=\()       # preceded by (
						(define)\s+   # define
						(\()          # list of parameters
						  ([[:alnum:]][[:alnum:]!$%&amp;*+-./:&lt;=&gt;?@^_~]*)
						  ((\s+
						    ([[:alnum:]][[:alnum:]!$%&amp;*+-./:&lt;=&gt;?@^_~]*|[._])
						   )*
						  )\s*
						(\))
					</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.cult</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.function.cult</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.cult</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.function.cult</string>
						</dict>
						<key>7</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.function.cult</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=\))</string>
					<key>name</key>
					<string>meta.declaration.procedure.cult</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comment</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#sexp</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#illegal</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?x)
						(?&lt;=\() # preceded by (
						(lambda)\s+
						(\() # opening paren
						((?:
						  ([[:alnum:]][[:alnum:]!$%&amp;*+-./:&lt;=&gt;?@^_~]*|[._])
						  \s+
						)*(?:
						  ([[:alnum:]][[:alnum:]!$%&amp;*+-./:&lt;=&gt;?@^_~]*|[._])
						)?)
						(\)) # closing paren
					</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.cult</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.variable.cult</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.cult</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.variable.cult</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>
						Not sure this one is quite correct.  That \s* is
						particularly troubling
					</string>
					<key>end</key>
					<string>(?=\))</string>
					<key>name</key>
					<string>meta.declaration.procedure.cult</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comment</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#sexp</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#illegal</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?&lt;=\()(define)\s([[:alnum:]][[:alnum:]!$%&amp;*+-./:&lt;=&gt;?@^_~]*)\s*.*?</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.cult</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.other.cult</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=\))</string>
					<key>name</key>
					<string>meta.declaration.variable.cult</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comment</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#sexp</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#illegal</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#quote-sexp</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#quote</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#language-functions</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#constants</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;=[\(\s])(#\\)(space|newline|tab)(?=[\s\)])</string>
					<key>name</key>
					<string>constant.character.named.cult</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;=[\(\s])(#\\)x[0-9A-F]{2,4}(?=[\s\)])</string>
					<key>name</key>
					<string>constant.character.hex-literal.cult</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;=[\(\s])(#\\).(?=[\s\)])</string>
					<key>name</key>
					<string>constant.character.escape.cult</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>
						the . in (a . b) which conses together two elements
						a and b. (a b c) == (a . (b . (c . nil)))
					</string>
					<key>match</key>
					<string>(?&lt;=[ ()])\.(?=[ ()])</string>
					<key>name</key>
					<string>punctuation.separator.cons.cult</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#sexp</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#illegal</string>
				</dict>
			</array>
		</dict>
		<key>string</key>
		<dict>
			<key>begin</key>
			<string>(")</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.cult</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(")</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.cult</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.double.cult</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\.</string>
					<key>name</key>
					<string>constant.character.escape.cult</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.cult</string>
	<key>uuid</key>
	<string>3EC2CFD0-909C-4692-AC29-1A60ADBC161E</string>
</dict>
</plist>
